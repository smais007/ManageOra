generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  MEMBER
  CLIENT
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  firstName      String
  lastName       String
  phone          String
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  role           UserRole        @default(USER)
  password       String?
  userId         String?         @db.ObjectId
  status         Boolean         @default(true)
  accounts       Account[]
  sessions       Session[]
  projects       Project[]
  invoices       Invoice[]
  portfolioItems PortfolioItem[]
  payments       Payment[]
  isVerfied      Boolean         @default(false)
  token          Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Module {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String   @db.ObjectId
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Task {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  status      String
  dueDate     DateTime?
  module      Module    @relation(fields: [moduleId], references: [id])
  moduleId    String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Project {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  startDat    String
  endDate     String?
  status      String
  clientId    String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  modules     Module[]
  // member Member[] 
  invoices    Invoice[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model Member {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Invoice {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  invoiceNumber String   @unique
  amount        Float
  status        String
  dueData       DateTime
  project       Project  @relation(fields: [projectId], references: [id])
  projectId     String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// client Client @relation(fields: [clientId], references: [id])

model Payment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  ammount   Float
  date      DateTime
  method    String
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  imageUrl    String?
  description String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model PortfolioItem {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  imageUrl    String?
  projectUrl  String?
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}
